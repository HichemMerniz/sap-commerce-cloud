{"version":3,"sources":["node_modules/@spartacus/cart/fesm2022/spartacus-cart-base-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, inject, InjectionToken, NgModule, isDevMode } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { StateUtils, PROCESS_FEATURE, SiteContextActions, LoggerService, normalizeHttpError, withdrawOn, GlobalMessageType, OCC_USER_ID_ANONYMOUS, EMAIL_PATTERN, OCC_CART_ID_CURRENT, isNotUndefined, AuthActions, BASE_SITE_CONTEXT_ID, StorageSyncType, MODULE_INITIALIZER, ConfigInitializerService, createFrom, OAUTH_REDIRECT_FLOW_KEY, getLastValueSync, OCC_USER_ID_GUEST, CommandStrategy, ProcessSelectors, HttpErrorHandler, HttpResponseStatus, StateModule } from '@spartacus/core';\nimport * as i1$1 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, META_REDUCERS, StoreModule } from '@ngrx/store';\nimport * as i1$2 from '@spartacus/cart/base/root';\nimport { CartType, CartAddEntryEvent, CartAddEntrySuccessEvent, CartAddEntryFailEvent, CartRemoveEntrySuccessEvent, CartRemoveEntryFailEvent, CartUpdateEntrySuccessEvent, CartUpdateEntryFailEvent, MergeCartSuccessEvent, CreateCartEvent, CreateCartSuccessEvent, CreateCartFailEvent, DeleteCartEvent, DeleteCartSuccessEvent, DeleteCartFailEvent, AddCartVoucherEvent, AddCartVoucherSuccessEvent, AddCartVoucherFailEvent, RemoveCartVoucherEvent, RemoveCartVoucherSuccessEvent, RemoveCartVoucherFailEvent, CartPageEvent, ActiveCartFacade, CartVoucherFacade, MultiCartFacade, SelectiveCartFacade, CartValidationFacade, CartValidationStatusCode, ProductImportStatus } from '@spartacus/cart/base/root';\nimport { from, of, Subscription, lastValueFrom, using, combineLatest, ReplaySubject, timer } from 'rxjs';\nimport { map, catchError, concatMap, mergeMap, groupBy, withLatestFrom, switchMap, filter, distinctUntilKeyChanged, tap, take, distinctUntilChanged, shareReplay, pairwise, debounce } from 'rxjs/operators';\nimport * as i1 from '@ngrx/effects';\nimport { ofType, createEffect, EffectsModule } from '@ngrx/effects';\nimport { NavigationEvent } from '@spartacus/storefront';\nimport * as i1$3 from '@spartacus/user/profile/root';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@angular/router';\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst MULTI_CART_FEATURE = 'cart';\nconst MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n/**\n * Add voucher process const\n */\nconst ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nconst CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nconst CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nconst CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nconst CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nconst CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\nconst CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nconst CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nconst CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\nclass CartAddEntry extends StateUtils.EntityProcessesIncrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_ADD_ENTRY;\n  }\n}\nclass CartAddEntrySuccess extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_ADD_ENTRY_SUCCESS;\n  }\n}\nclass CartAddEntryFail extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_ADD_ENTRY_FAIL;\n  }\n}\nclass CartRemoveEntry extends StateUtils.EntityProcessesIncrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_REMOVE_ENTRY;\n  }\n}\nclass CartRemoveEntrySuccess extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_REMOVE_ENTRY_SUCCESS;\n  }\n}\nclass CartRemoveEntryFail extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_REMOVE_ENTRY_FAIL;\n  }\n}\nclass CartUpdateEntry extends StateUtils.EntityProcessesIncrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_UPDATE_ENTRY;\n  }\n}\nclass CartUpdateEntrySuccess extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_UPDATE_ENTRY_SUCCESS;\n  }\n}\nclass CartUpdateEntryFail extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_UPDATE_ENTRY_FAIL;\n  }\n}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nconst CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nconst CART_ADD_VOUCHER_SUCCESS = '[Cart-voucher] Add Cart Voucher Success';\nconst CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\nconst CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nconst CART_REMOVE_VOUCHER_FAIL = '[Cart-voucher] Remove Cart Voucher Fail';\nconst CART_REMOVE_VOUCHER_SUCCESS = '[Cart-voucher] Remove Cart Voucher Success';\n// Adding cart voucher actions\nclass CartAddVoucher extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n    this.payload = payload;\n    this.type = CART_ADD_VOUCHER;\n  }\n}\nclass CartAddVoucherFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = CART_ADD_VOUCHER_FAIL;\n  }\n}\nclass CartAddVoucherSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n    this.payload = payload;\n    this.type = CART_ADD_VOUCHER_SUCCESS;\n  }\n}\n/**\n * Resets add voucher process\n */\nclass CartResetAddVoucher extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n    this.type = CART_RESET_ADD_VOUCHER;\n  }\n}\n// Deleting cart voucher\nclass CartRemoveVoucher extends StateUtils.EntityProcessesIncrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_REMOVE_VOUCHER;\n  }\n}\nclass CartRemoveVoucherFail extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_REMOVE_VOUCHER_FAIL;\n  }\n}\nclass CartRemoveVoucherSuccess extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CART_REMOVE_VOUCHER_SUCCESS;\n  }\n}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CREATE_CART = '[Cart] Create Cart';\nconst CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nconst CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\nconst LOAD_CART = '[Cart] Load Cart';\nconst LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nconst LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\nconst LOAD_CARTS_SUCCESS = '[Cart] Load Carts Success';\nconst ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nconst ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nconst ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\nconst MERGE_CART = '[Cart] Merge Cart';\nconst MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\nconst RESET_CART_DETAILS = '[Cart] Reset Cart Details';\nconst REMOVE_CART = '[Cart] Remove Cart';\nconst DELETE_CART = '[Cart] Delete Cart';\nconst DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nconst DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\nclass CreateCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n    this.payload = payload;\n    this.type = CREATE_CART;\n  }\n}\nclass CreateCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n    this.payload = payload;\n    this.type = CREATE_CART_FAIL;\n  }\n}\nclass CreateCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = CREATE_CART_SUCCESS;\n  }\n}\nclass AddEmailToCart extends StateUtils.EntityProcessesIncrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = ADD_EMAIL_TO_CART;\n  }\n}\nclass AddEmailToCartFail extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = ADD_EMAIL_TO_CART_FAIL;\n  }\n}\nclass AddEmailToCartSuccess extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = ADD_EMAIL_TO_CART_SUCCESS;\n  }\n}\nclass LoadCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = LOAD_CART;\n  }\n}\nclass LoadCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n    this.payload = payload;\n    this.type = LOAD_CART_FAIL;\n  }\n}\nclass LoadCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = LOAD_CART_SUCCESS;\n  }\n}\nclass LoadCartsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.map(cart => cart?.code ?? ''));\n    this.payload = payload;\n    this.type = LOAD_CARTS_SUCCESS;\n  }\n}\nclass MergeCart {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = MERGE_CART;\n  }\n}\nclass MergeCartSuccess extends StateUtils.EntityRemoveAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n    this.payload = payload;\n    this.type = MERGE_CART_SUCCESS;\n  }\n}\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nclass ResetCartDetails extends StateUtils.ProcessesLoaderResetAction {\n  constructor() {\n    super(MULTI_CART_DATA);\n    this.type = RESET_CART_DETAILS;\n  }\n}\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nclass RemoveCart extends StateUtils.EntityRemoveAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = REMOVE_CART;\n  }\n}\nclass DeleteCart {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = DELETE_CART;\n  }\n}\nclass DeleteCartSuccess extends StateUtils.EntityRemoveAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = DELETE_CART_SUCCESS;\n  }\n}\nclass DeleteCartFail {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = DELETE_CART_FAIL;\n  }\n}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nconst CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\nconst SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\nconst CLEAR_CART_STATE = '[Cart] Clear Cart State';\nconst SET_CART_TYPE_INDEX = '[Cart] Set cart type index';\nconst SET_CART_DATA = '[Cart] Set cart data';\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n */\nclass CartProcessesIncrement extends StateUtils.EntityProcessesIncrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload);\n    this.payload = payload;\n    this.type = CART_PROCESSES_INCREMENT;\n  }\n}\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n */\nclass CartProcessesDecrement extends StateUtils.EntityProcessesDecrementAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload);\n    this.payload = payload;\n    this.type = CART_PROCESSES_DECREMENT;\n  }\n}\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nclass SetActiveCartId {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = SET_ACTIVE_CART_ID;\n  }\n}\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nclass ClearCartState extends StateUtils.EntityRemoveAllAction {\n  constructor() {\n    super(MULTI_CART_DATA);\n    this.type = CLEAR_CART_STATE;\n  }\n}\nclass SetCartTypeIndex {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = SET_CART_TYPE_INDEX;\n  }\n}\nclass SetCartData extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = SET_CART_DATA;\n  }\n}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar cartGroup_actions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ADD_EMAIL_TO_CART: ADD_EMAIL_TO_CART,\n  ADD_EMAIL_TO_CART_FAIL: ADD_EMAIL_TO_CART_FAIL,\n  ADD_EMAIL_TO_CART_SUCCESS: ADD_EMAIL_TO_CART_SUCCESS,\n  AddEmailToCart: AddEmailToCart,\n  AddEmailToCartFail: AddEmailToCartFail,\n  AddEmailToCartSuccess: AddEmailToCartSuccess,\n  CART_ADD_ENTRY: CART_ADD_ENTRY,\n  CART_ADD_ENTRY_FAIL: CART_ADD_ENTRY_FAIL,\n  CART_ADD_ENTRY_SUCCESS: CART_ADD_ENTRY_SUCCESS,\n  CART_ADD_VOUCHER: CART_ADD_VOUCHER,\n  CART_ADD_VOUCHER_FAIL: CART_ADD_VOUCHER_FAIL,\n  CART_ADD_VOUCHER_SUCCESS: CART_ADD_VOUCHER_SUCCESS,\n  CART_PROCESSES_DECREMENT: CART_PROCESSES_DECREMENT,\n  CART_PROCESSES_INCREMENT: CART_PROCESSES_INCREMENT,\n  CART_REMOVE_ENTRY: CART_REMOVE_ENTRY,\n  CART_REMOVE_ENTRY_FAIL: CART_REMOVE_ENTRY_FAIL,\n  CART_REMOVE_ENTRY_SUCCESS: CART_REMOVE_ENTRY_SUCCESS,\n  CART_REMOVE_VOUCHER: CART_REMOVE_VOUCHER,\n  CART_REMOVE_VOUCHER_FAIL: CART_REMOVE_VOUCHER_FAIL,\n  CART_REMOVE_VOUCHER_SUCCESS: CART_REMOVE_VOUCHER_SUCCESS,\n  CART_RESET_ADD_VOUCHER: CART_RESET_ADD_VOUCHER,\n  CART_UPDATE_ENTRY: CART_UPDATE_ENTRY,\n  CART_UPDATE_ENTRY_FAIL: CART_UPDATE_ENTRY_FAIL,\n  CART_UPDATE_ENTRY_SUCCESS: CART_UPDATE_ENTRY_SUCCESS,\n  CLEAR_CART_STATE: CLEAR_CART_STATE,\n  CREATE_CART: CREATE_CART,\n  CREATE_CART_FAIL: CREATE_CART_FAIL,\n  CREATE_CART_SUCCESS: CREATE_CART_SUCCESS,\n  CartAddEntry: CartAddEntry,\n  CartAddEntryFail: CartAddEntryFail,\n  CartAddEntrySuccess: CartAddEntrySuccess,\n  CartAddVoucher: CartAddVoucher,\n  CartAddVoucherFail: CartAddVoucherFail,\n  CartAddVoucherSuccess: CartAddVoucherSuccess,\n  CartProcessesDecrement: CartProcessesDecrement,\n  CartProcessesIncrement: CartProcessesIncrement,\n  CartRemoveEntry: CartRemoveEntry,\n  CartRemoveEntryFail: CartRemoveEntryFail,\n  CartRemoveEntrySuccess: CartRemoveEntrySuccess,\n  CartRemoveVoucher: CartRemoveVoucher,\n  CartRemoveVoucherFail: CartRemoveVoucherFail,\n  CartRemoveVoucherSuccess: CartRemoveVoucherSuccess,\n  CartResetAddVoucher: CartResetAddVoucher,\n  CartUpdateEntry: CartUpdateEntry,\n  CartUpdateEntryFail: CartUpdateEntryFail,\n  CartUpdateEntrySuccess: CartUpdateEntrySuccess,\n  ClearCartState: ClearCartState,\n  CreateCart: CreateCart,\n  CreateCartFail: CreateCartFail,\n  CreateCartSuccess: CreateCartSuccess,\n  DELETE_CART: DELETE_CART,\n  DELETE_CART_FAIL: DELETE_CART_FAIL,\n  DELETE_CART_SUCCESS: DELETE_CART_SUCCESS,\n  DeleteCart: DeleteCart,\n  DeleteCartFail: DeleteCartFail,\n  DeleteCartSuccess: DeleteCartSuccess,\n  LOAD_CART: LOAD_CART,\n  LOAD_CARTS_SUCCESS: LOAD_CARTS_SUCCESS,\n  LOAD_CART_FAIL: LOAD_CART_FAIL,\n  LOAD_CART_SUCCESS: LOAD_CART_SUCCESS,\n  LoadCart: LoadCart,\n  LoadCartFail: LoadCartFail,\n  LoadCartSuccess: LoadCartSuccess,\n  LoadCartsSuccess: LoadCartsSuccess,\n  MERGE_CART: MERGE_CART,\n  MERGE_CART_SUCCESS: MERGE_CART_SUCCESS,\n  MergeCart: MergeCart,\n  MergeCartSuccess: MergeCartSuccess,\n  REMOVE_CART: REMOVE_CART,\n  RESET_CART_DETAILS: RESET_CART_DETAILS,\n  RemoveCart: RemoveCart,\n  ResetCartDetails: ResetCartDetails,\n  SET_ACTIVE_CART_ID: SET_ACTIVE_CART_ID,\n  SET_CART_DATA: SET_CART_DATA,\n  SET_CART_TYPE_INDEX: SET_CART_TYPE_INDEX,\n  SetActiveCartId: SetActiveCartId,\n  SetCartData: SetCartData,\n  SetCartTypeIndex: SetCartTypeIndex\n});\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartEntryAdapter {}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartEntryConnector {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n  add(userId, cartId, productCode, quantity, pickupStore) {\n    return this.adapter.add(userId, cartId, productCode, quantity, pickupStore);\n  }\n  update(userId, cartId, entryNumber, qty, pickupStore, pickupToDelivery = false) {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore, pickupToDelivery);\n  }\n  remove(userId, cartId, entryNumber) {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n  static {\n    this.ɵfac = function CartEntryConnector_Factory(t) {\n      return new (t || CartEntryConnector)(i0.ɵɵinject(CartEntryAdapter));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartEntryConnector,\n      factory: CartEntryConnector.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartEntryConnector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: CartEntryAdapter\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartEntryEffects {\n  constructor(actions$, cartEntryConnector) {\n    this.actions$ = actions$;\n    this.cartEntryConnector = cartEntryConnector;\n    this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));\n    this.logger = inject(LoggerService);\n    this.addEntry$ = createEffect(() => this.actions$.pipe(ofType(CART_ADD_ENTRY), map(action => action.payload), concatMap(payload => {\n      return this.cartEntryConnector.add(payload.userId, payload.cartId, payload.productCode, payload.quantity, payload.pickupStore).pipe(map(cartModification => new CartAddEntrySuccess({\n        ...payload,\n        ...cartModification\n      })), catchError(error => from([new CartAddEntryFail({\n        ...payload,\n        error: normalizeHttpError(error, this.logger)\n      }), new LoadCart({\n        cartId: payload.cartId,\n        userId: payload.userId\n      })])));\n    }), withdrawOn(this.contextChange$)));\n    this.removeEntry$ = createEffect(() => this.actions$.pipe(ofType(CART_REMOVE_ENTRY), map(action => action.payload), concatMap(payload => this.cartEntryConnector.remove(payload.userId, payload.cartId, payload.entryNumber).pipe(map(() => {\n      return new CartRemoveEntrySuccess({\n        ...payload\n      });\n    }), catchError(error => from([new CartRemoveEntryFail({\n      ...payload,\n      error: normalizeHttpError(error, this.logger)\n    }), new LoadCart({\n      cartId: payload.cartId,\n      userId: payload.userId\n    })])))), withdrawOn(this.contextChange$)));\n    this.updateEntry$ = createEffect(() => this.actions$.pipe(ofType(CART_UPDATE_ENTRY), map(action => action.payload), concatMap(payload => this.cartEntryConnector.update(payload.userId, payload.cartId, payload.entryNumber, payload.quantity, payload.pickupStore, payload.pickupToDelivery).pipe(map(() => {\n      return new CartUpdateEntrySuccess({\n        ...payload\n      });\n    }), catchError(error => from([new CartUpdateEntryFail({\n      ...payload,\n      error: normalizeHttpError(error, this.logger)\n    }), new LoadCart({\n      cartId: payload.cartId,\n      userId: payload.userId\n    })])))), withdrawOn(this.contextChange$)));\n  }\n  static {\n    this.ɵfac = function CartEntryEffects_Factory(t) {\n      return new (t || CartEntryEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(CartEntryConnector));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartEntryEffects,\n      factory: CartEntryEffects.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartEntryEffects, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Actions\n  }, {\n    type: CartEntryConnector\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartVoucherAdapter {}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartVoucherConnector {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n  add(userId, cartId, voucherId) {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n  remove(userId, cartId, voucherId) {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n  static {\n    this.ɵfac = function CartVoucherConnector_Factory(t) {\n      return new (t || CartVoucherConnector)(i0.ɵɵinject(CartVoucherAdapter));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartVoucherConnector,\n      factory: CartVoucherConnector.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartVoucherConnector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: CartVoucherAdapter\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartVoucherEffects {\n  constructor(actions$, cartVoucherConnector, messageService) {\n    this.actions$ = actions$;\n    this.cartVoucherConnector = cartVoucherConnector;\n    this.messageService = messageService;\n    this.logger = inject(LoggerService);\n    this.addCartVoucher$ = createEffect(() => this.actions$.pipe(ofType(CART_ADD_VOUCHER), map(action => action.payload), mergeMap(payload => {\n      return this.cartVoucherConnector.add(payload.userId, payload.cartId, payload.voucherId).pipe(map(() => {\n        this.showGlobalMessage('voucher.applyVoucherSuccess', payload.voucherId, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        return new CartAddVoucherSuccess({\n          ...payload\n        });\n      }), catchError(error => from([new CartAddVoucherFail({\n        ...payload,\n        error: normalizeHttpError(error, this.logger)\n      }), new CartProcessesDecrement(payload.cartId), new LoadCart({\n        userId: payload.userId,\n        cartId: payload.cartId\n      })])));\n    })));\n    this.removeCartVoucher$ = createEffect(() => this.actions$.pipe(ofType(CART_REMOVE_VOUCHER), map(action => action.payload), mergeMap(payload => {\n      return this.cartVoucherConnector.remove(payload.userId, payload.cartId, payload.voucherId).pipe(map(() => {\n        this.showGlobalMessage('voucher.removeVoucherSuccess', payload.voucherId, GlobalMessageType.MSG_TYPE_INFO);\n        return new CartRemoveVoucherSuccess({\n          userId: payload.userId,\n          cartId: payload.cartId,\n          voucherId: payload.voucherId\n        });\n      }), catchError(error => from([new CartRemoveVoucherFail({\n        error: normalizeHttpError(error, this.logger),\n        cartId: payload.cartId,\n        userId: payload.userId,\n        voucherId: payload.voucherId\n      }), new LoadCart({\n        userId: payload.userId,\n        cartId: payload.cartId\n      })])));\n    })));\n  }\n  showGlobalMessage(text, param, messageType) {\n    this.messageService.add({\n      key: text,\n      params: {\n        voucherCode: param\n      }\n    }, messageType);\n  }\n  static {\n    this.ɵfac = function CartVoucherEffects_Factory(t) {\n      return new (t || CartVoucherEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(CartVoucherConnector), i0.ɵɵinject(i2.GlobalMessageService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartVoucherEffects,\n      factory: CartVoucherEffects.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartVoucherEffects, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Actions\n  }, {\n    type: CartVoucherConnector\n  }, {\n    type: i2.GlobalMessageService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nfunction getCartIdByUserId(cart, userId) {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart?.guid ?? '';\n  }\n  return cart?.code ?? '';\n}\n/**\n * Check if cart is selective (save for later) based on id.\n */\nfunction isSelectiveCart(cartId = '') {\n  return cartId.startsWith('selectivecart');\n}\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nfunction isCartNotFoundError(error) {\n  return error.reason === 'notFound' && error.subjectType === 'cart' && !isSelectiveCart(error.subject);\n}\nfunction voucherExceededError(error) {\n  return error.message === 'coupon.already.redeemed';\n}\nfunction voucherInvalidError(error) {\n  return error.message === 'coupon.invalid.code.provided';\n}\nfunction isVoucherError(error) {\n  return error.type === 'VoucherOperationError';\n}\nfunction isCartError(error) {\n  return error.type === 'CartError' || error.type === 'CartAddressError' || error.type === 'CartEntryError' || error.type === 'CartEntryGroupError';\n}\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nfunction isTempCartId(cartId) {\n  return cartId.startsWith('temp-');\n}\n/**\n * Indicates if given cart is empty.\n * Returns true is cart is undefined, null or is an empty object.\n */\nfunction isEmpty(cart) {\n  return !cart || typeof cart === 'object' && Object.keys(cart).length === 0;\n}\n/**\n * Indicates if given string is matching email pattern\n */\nfunction isEmail(str) {\n  if (str) {\n    return str.match(EMAIL_PATTERN) ? true : false;\n  }\n  return false;\n}\n/**\n * Indicates if a given user is logged in on account different than preceding user account\n */\nfunction isJustLoggedIn(userId, previousUserId) {\n  return userId !== OCC_USER_ID_ANONYMOUS &&\n  // not logged out\n  previousUserId !== userId // *just* logged in / switched to ASM emulation\n  ;\n}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst getMultiCartState = createFeatureSelector(MULTI_CART_FEATURE);\nconst getMultiCartEntities = createSelector(getMultiCartState, state => state.carts);\nconst getCartEntitySelectorFactory = cartId => {\n  return createSelector(getMultiCartEntities, state => StateUtils.entityProcessesLoaderStateSelector(state, cartId));\n};\nconst getCartSelectorFactory = cartId => {\n  return createSelector(getMultiCartEntities, state => StateUtils.entityValueSelector(state, cartId));\n};\nconst getCartIsStableSelectorFactory = cartId => {\n  return createSelector(getMultiCartEntities, state => StateUtils.entityIsStableSelector(state, cartId));\n};\nconst getCartHasPendingProcessesSelectorFactory = cartId => {\n  return createSelector(getMultiCartEntities, state => StateUtils.entityHasPendingProcessesSelector(state, cartId));\n};\nconst getCartEntriesSelectorFactory = cartId => {\n  return createSelector(getCartSelectorFactory(cartId), state => {\n    return state && state.entries ? state.entries : [];\n  });\n};\nconst getCartEntrySelectorFactory = (cartId, productCode) => {\n  return createSelector(getCartEntriesSelectorFactory(cartId), state => {\n    return state.find(entry => entry.product?.code === productCode);\n  });\n};\nconst getCartsSelectorFactory = createSelector(getMultiCartEntities, state => Object.keys(state.entities).map(key => StateUtils.entityValueSelector(state, key)));\nconst getCartTypeIndex = createSelector(getMultiCartState, state => state.index);\nconst getCartIdByTypeFactory = type => {\n  return createSelector(getCartTypeIndex, state => {\n    return state && state[type];\n  });\n};\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartAdapter {}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartConnector {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n  loadAll(userId) {\n    return this.adapter.loadAll(userId);\n  }\n  load(userId, cartId) {\n    return this.adapter.load(userId, cartId);\n  }\n  create(userId, oldCartId, toMergeCartGuid) {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n  delete(userId, cartId) {\n    return this.adapter.delete(userId, cartId);\n  }\n  save(userId, cartId, saveCartName, saveCartDescription) {\n    return this.adapter.save(userId, cartId, saveCartName, saveCartDescription);\n  }\n  addEmail(userId, cartId, email) {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n  static {\n    this.ɵfac = function CartConnector_Factory(t) {\n      return new (t || CartConnector)(i0.ɵɵinject(CartAdapter));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartConnector,\n      factory: CartConnector.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartConnector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: CartAdapter\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartEffects {\n  handleLoadCartError(payload, error) {\n    if (error?.error?.errors) {\n      const couponExpiredErrors = error.error.errors.filter(err => err.reason === 'invalid');\n      if (couponExpiredErrors.length > 0) {\n        // Reload in case of expired coupon.\n        return of(new LoadCart({\n          ...payload\n        }));\n      }\n      const cartNotFoundErrors = error.error.errors.filter(err => isCartNotFoundError(err) || err.reason === 'UnknownResourceError');\n      if (cartNotFoundErrors.length > 0) {\n        // Remove cart as it doesn't exist on backend (selective cart always exists).\n        return of(new RemoveCart({\n          cartId: payload.cartId\n        }));\n      }\n    }\n    return of(new LoadCartFail({\n      ...payload,\n      error: normalizeHttpError(error, this.logger)\n    }));\n  }\n  constructor(actions$, cartConnector, store) {\n    this.actions$ = actions$;\n    this.cartConnector = cartConnector;\n    this.store = store;\n    this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));\n    this.logger = inject(LoggerService);\n    this.loadCart$ = createEffect(() => this.actions$.pipe(ofType(LOAD_CART), map(action => action.payload), groupBy(payload => payload.cartId), mergeMap(group$ => group$.pipe(switchMap(payload => {\n      return of(payload).pipe(withLatestFrom(this.store.pipe(select(getCartHasPendingProcessesSelectorFactory(payload.cartId)))));\n    }), filter(([_, hasPendingProcesses]) => !hasPendingProcesses), map(([payload]) => payload), switchMap(payload => {\n      return this.cartConnector.load(payload.userId, payload.cartId).pipe(mergeMap(cart => {\n        let actions = [];\n        if (cart) {\n          actions.push(new LoadCartSuccess({\n            ...payload,\n            cart,\n            cartId: getCartIdByUserId(cart, payload.userId)\n          }));\n          if (payload.cartId === OCC_CART_ID_CURRENT) {\n            // Removing cart from entity object under `current` key as it is no longer needed.\n            // Current cart is loaded under it's code entity.\n            actions.push(new RemoveCart({\n              cartId: OCC_CART_ID_CURRENT\n            }));\n          }\n        } else {\n          actions = [new LoadCartFail({\n            ...payload,\n            error: {}\n          })];\n        }\n        return actions;\n      }), catchError(error => this.handleLoadCartError(payload, error)));\n    }))), withdrawOn(this.contextChange$)));\n    this.createCart$ = createEffect(() => this.actions$.pipe(ofType(CREATE_CART), map(action => action.payload), mergeMap(payload => {\n      return this.cartConnector.create(payload.userId, payload.oldCartId, payload.toMergeCartGuid).pipe(switchMap(cart => {\n        const conditionalActions = [];\n        if (payload.oldCartId) {\n          conditionalActions.push(new MergeCartSuccess({\n            extraData: payload.extraData,\n            userId: payload.userId,\n            tempCartId: payload.tempCartId,\n            cartId: getCartIdByUserId(cart, payload.userId),\n            oldCartId: payload.oldCartId\n          }));\n        }\n        return [new CreateCartSuccess({\n          ...payload,\n          cart,\n          cartId: getCartIdByUserId(cart, payload.userId)\n        }), new RemoveCart({\n          cartId: payload.tempCartId\n        }), ...conditionalActions];\n      }), catchError(error => of(new CreateCartFail({\n        ...payload,\n        error: normalizeHttpError(error, this.logger)\n      }))));\n    }), withdrawOn(this.contextChange$)));\n    this.mergeCart$ = createEffect(() => this.actions$.pipe(ofType(MERGE_CART), map(action => action.payload), switchMap(payload => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(map(currentCart => {\n        if (currentCart?.code !== payload.cartId) {\n          return new CreateCart({\n            userId: payload.userId,\n            oldCartId: payload.cartId,\n            toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n            extraData: payload.extraData,\n            tempCartId: payload.tempCartId\n          });\n        }\n      }), filter(isNotUndefined));\n    }), withdrawOn(this.contextChange$)));\n    // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n    this.refresh$ = createEffect(() => this.actions$.pipe(ofType(CART_ADD_VOUCHER_SUCCESS), map(action => action.payload), concatMap(payload => from([new CartProcessesDecrement(payload.cartId), new LoadCart({\n      userId: payload.userId,\n      cartId: payload.cartId\n    })]))));\n    // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n    this.refreshWithoutProcesses$ = createEffect(() => this.actions$.pipe(ofType(CART_ADD_ENTRY_SUCCESS, CART_REMOVE_ENTRY_SUCCESS, CART_UPDATE_ENTRY_SUCCESS, CART_REMOVE_VOUCHER_SUCCESS), map(action => action.payload), map(payload => new LoadCart({\n      userId: payload.userId,\n      cartId: payload.cartId\n    }))));\n    this.resetCartDetailsOnSiteContextChange$ = createEffect(() => this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, SiteContextActions.CURRENCY_CHANGE), mergeMap(() => {\n      return [new ResetCartDetails()];\n    })));\n    this.addEmail$ = createEffect(() => this.actions$.pipe(ofType(ADD_EMAIL_TO_CART), map(action => action.payload), mergeMap(payload => this.cartConnector.addEmail(payload.userId, payload.cartId, payload.email).pipe(mergeMap(() => {\n      return [new AddEmailToCartSuccess({\n        ...payload\n      }), new LoadCart({\n        userId: payload.userId,\n        cartId: payload.cartId\n      })];\n    }), catchError(error => from([new AddEmailToCartFail({\n      ...payload,\n      error: normalizeHttpError(error, this.logger)\n    }), new LoadCart({\n      userId: payload.userId,\n      cartId: payload.cartId\n    })])))), withdrawOn(this.contextChange$)));\n    this.deleteCart$ = createEffect(() => this.actions$.pipe(ofType(DELETE_CART), map(action => action.payload), mergeMap(payload => this.cartConnector.delete(payload.userId, payload.cartId).pipe(map(() => {\n      return new DeleteCartSuccess({\n        ...payload\n      });\n    }), catchError(error => from([new DeleteCartFail({\n      ...payload,\n      error: normalizeHttpError(error, this.logger)\n    }),\n    // Error might happen in higher backend layer and cart could still be removed.\n    // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n    new LoadCart({\n      ...payload\n    })]))))));\n  }\n  static {\n    this.ɵfac = function CartEffects_Factory(t) {\n      return new (t || CartEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(CartConnector), i0.ɵɵinject(i1$1.Store));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartEffects,\n      factory: CartEffects.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartEffects, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Actions\n  }, {\n    type: CartConnector\n  }, {\n    type: i1$1.Store\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass MultiCartEffectsService {\n  /**\n   * Verifies if cart is the active cart or saved cart and returns the appropriate cart type\n   * @param action\n   * @returns cart type\n   */\n  getActiveCartTypeOnLoadSuccess(action) {\n    if (action?.payload?.extraData?.active) {\n      // saved cart is not active cart\n      if (action.payload?.cart.saveTime) {\n        return new SetCartTypeIndex({\n          cartType: CartType.ACTIVE,\n          cartId: ''\n        });\n      }\n      return new SetCartTypeIndex({\n        cartType: CartType.ACTIVE,\n        cartId: action.meta.entityId\n      });\n    }\n  }\n  static {\n    this.ɵfac = function MultiCartEffectsService_Factory(t) {\n      return new (t || MultiCartEffectsService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MultiCartEffectsService,\n      factory: MultiCartEffectsService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MultiCartEffectsService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass MultiCartEffects {\n  /**\n   * Verifies if cart is the current cart and returns the appropriate cart type\n   * @param action\n   * @returns cart type needed on load\n   */\n  getActiveCartTypeOnLoad(action) {\n    if (action?.payload?.cartId === OCC_CART_ID_CURRENT) {\n      return new SetCartTypeIndex({\n        cartType: CartType.ACTIVE,\n        cartId: ''\n      });\n    }\n    return undefined;\n  }\n  /**\n   * Verifies if cart is the active cart or saved cart and returns the appropriate cart type\n   * @param action\n   * @returns cart type\n   */\n  getActiveCartTypeOnLoadSuccess(action) {\n    // Extracted small portion of private effect's logic to a public service\n    // to allow FSA for customizing it (for more, see CXSPA-3551)\n    return this.multiCartEffectsService.getActiveCartTypeOnLoadSuccess(action);\n  }\n  /**\n   * Verifies if cart is active and returns the appropriate cart type\n   * @param action\n   * @returns cart type needed on creation\n   */\n  getActiveCartTypeOnCreate(action) {\n    if (action?.payload?.extraData?.active) {\n      return new SetCartTypeIndex({\n        cartType: CartType.ACTIVE,\n        cartId: action.meta.entityId\n      });\n    }\n    return undefined;\n  }\n  constructor(actions$, multiCartEffectsService) {\n    this.actions$ = actions$;\n    this.multiCartEffectsService = multiCartEffectsService;\n    // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n    this.processesIncrement$ = createEffect(() => this.actions$.pipe(ofType(CART_ADD_VOUCHER), map(action => action.payload), map(payload => new CartProcessesIncrement(payload.cartId))));\n    this.setSelectiveId$ = createEffect(() => this.actions$.pipe(ofType(LOAD_CART_SUCCESS), map(action => {\n      switch (action.type) {\n        case LOAD_CART_SUCCESS:\n          {\n            const payload = action.payload;\n            if (isSelectiveCart(payload.cartId)) {\n              return new SetCartTypeIndex({\n                cartType: CartType.SELECTIVE,\n                cartId: payload.cartId\n              });\n            }\n            break;\n          }\n      }\n    }), filter(isNotUndefined)));\n    this.setActiveCartId$ = createEffect(() => this.actions$.pipe(ofType(LOAD_CART_SUCCESS, LOAD_CART, CREATE_CART_SUCCESS, CREATE_CART, SET_ACTIVE_CART_ID), map(action => {\n      switch (action.type) {\n        case LOAD_CART:\n          {\n            return this.getActiveCartTypeOnLoad(action);\n          }\n        case LOAD_CART_SUCCESS:\n          {\n            return this.getActiveCartTypeOnLoadSuccess(action);\n          }\n        case CREATE_CART:\n          {\n            return this.getActiveCartTypeOnCreate(action);\n          }\n        case CREATE_CART_SUCCESS:\n          {\n            return new SetCartTypeIndex({\n              cartType: action?.payload?.extraData?.active ? CartType.ACTIVE : CartType.NEW_CREATED,\n              cartId: action.meta.entityId\n            });\n          }\n        case SET_ACTIVE_CART_ID:\n          return new SetCartTypeIndex({\n            cartType: CartType.ACTIVE,\n            cartId: action.payload\n          });\n      }\n      return undefined;\n    }), filter(isNotUndefined)));\n  }\n  static {\n    this.ɵfac = function MultiCartEffects_Factory(t) {\n      return new (t || MultiCartEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(MultiCartEffectsService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MultiCartEffects,\n      factory: MultiCartEffects.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MultiCartEffects, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Actions\n  }, {\n    type: MultiCartEffectsService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst effects = [CartEntryEffects, CartVoucherEffects, CartEffects, MultiCartEffects];\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst cartTypeIndexInitialState = {\n  [CartType.ACTIVE]: ''\n};\nfunction cartTypeIndexReducer(state = cartTypeIndexInitialState, action) {\n  switch (action.type) {\n    case SET_CART_TYPE_INDEX:\n      return {\n        ...state,\n        [action.payload.cartType]: action.payload.cartId\n      };\n    case REMOVE_CART:\n    case DELETE_CART_SUCCESS:\n      {\n        if (action.payload?.cartId === state[CartType.ACTIVE]) {\n          return {\n            ...state,\n            [CartType.ACTIVE]: ''\n          };\n        }\n        return state;\n      }\n    case CLEAR_CART_STATE:\n      return cartTypeIndexInitialState;\n  }\n  return state;\n}\nconst cartEntitiesInitialState = undefined;\nfunction cartEntitiesReducer(state = cartEntitiesInitialState, action) {\n  switch (action.type) {\n    case LOAD_CARTS_SUCCESS:\n      return action.payload;\n    case LOAD_CART_SUCCESS:\n    case CREATE_CART_SUCCESS:\n    case SET_CART_DATA:\n      return action.payload.cart;\n  }\n  return state;\n}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction clearMultiCartState(reducer) {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\nconst multiCartMetaReducers = [clearMultiCartState];\nconst multiCartReducerToken = new InjectionToken('MultiCartReducers');\nfunction getMultiCartReducers() {\n  return {\n    carts: StateUtils.entityProcessesLoaderReducer(MULTI_CART_DATA, cartEntitiesReducer),\n    index: cartTypeIndexReducer\n  };\n}\nconst multiCartReducerProvider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers\n};\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar multiCartGroup_selectors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getCartEntitySelectorFactory: getCartEntitySelectorFactory,\n  getCartEntriesSelectorFactory: getCartEntriesSelectorFactory,\n  getCartEntrySelectorFactory: getCartEntrySelectorFactory,\n  getCartHasPendingProcessesSelectorFactory: getCartHasPendingProcessesSelectorFactory,\n  getCartIdByTypeFactory: getCartIdByTypeFactory,\n  getCartIsStableSelectorFactory: getCartIsStableSelectorFactory,\n  getCartSelectorFactory: getCartSelectorFactory,\n  getCartTypeIndex: getCartTypeIndex,\n  getCartsSelectorFactory: getCartsSelectorFactory,\n  getMultiCartEntities: getMultiCartEntities,\n  getMultiCartState: getMultiCartState\n});\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass MultiCartStatePersistenceService {\n  constructor(statePersistenceService, store, siteContextParamsService) {\n    this.statePersistenceService = statePersistenceService;\n    this.store = store;\n    this.siteContextParamsService = siteContextParamsService;\n    this.subscription = new Subscription();\n  }\n  initSync() {\n    this.subscription.add(this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      storageType: StorageSyncType.LOCAL_STORAGE,\n      onRead: state => this.onRead(state)\n    }));\n  }\n  getCartState() {\n    return this.store.pipe(\n    // Since getCartState() may be called while the module is lazy loded\n    // The cart state slice may not exist yet in the first store emissions.\n    filter(store => !!store.cart), select(getMultiCartState), filter(state => !!state), map(state => state.index), distinctUntilKeyChanged('Active'), map(indexState => {\n      return {\n        active: indexState[CartType.ACTIVE] ?? ''\n      };\n    }));\n  }\n  onRead(state) {\n    this.store.dispatch(new ClearCartState());\n    if (state) {\n      this.store.dispatch(new SetActiveCartId(state.active));\n    } else {\n      this.store.dispatch(new SetActiveCartId(''));\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  static {\n    this.ɵfac = function MultiCartStatePersistenceService_Factory(t) {\n      return new (t || MultiCartStatePersistenceService)(i0.ɵɵinject(i2.StatePersistenceService), i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i2.SiteContextParamsService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MultiCartStatePersistenceService,\n      factory: MultiCartStatePersistenceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MultiCartStatePersistenceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i2.StatePersistenceService\n  }, {\n    type: i1$1.Store\n  }, {\n    type: i2.SiteContextParamsService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nfunction cartStatePersistenceFactory(cartStatePersistenceService, configInit) {\n  return () => lastValueFrom(configInit.getStable('context').pipe(tap(() => {\n    cartStatePersistenceService.initSync();\n  })));\n}\n/**\n * Before `MultiCartStatePersistenceService` restores the active cart id `ActiveCartService`\n * will use `current` cart instead of the one saved in browser. This meta reducer\n * sets the value on store initialization to undefined cart which holds active cart loading\n * until the data from storage is restored.\n */\nfunction uninitializeActiveCartMetaReducerFactory() {\n  const metaReducer = reducer => (state, action) => {\n    const newState = {\n      ...state\n    };\n    if (action.type === '@ngrx/store/init') {\n      newState.cart = {\n        ...newState.cart,\n        ...{\n          index: {\n            [CartType.ACTIVE]: undefined\n          }\n        }\n      };\n    }\n    return reducer(newState, action);\n  };\n  return metaReducer;\n}\n/**\n * Complimentary module for cart to store cart id in browser storage.\n * This makes it possible to work on the same anonymous cart even after page refresh.\n */\nclass CartPersistenceModule {\n  static {\n    this.ɵfac = function CartPersistenceModule_Factory(t) {\n      return new (t || CartPersistenceModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CartPersistenceModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [{\n        provide: MODULE_INITIALIZER,\n        useFactory: cartStatePersistenceFactory,\n        deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n        multi: true\n      }, {\n        provide: META_REDUCERS,\n        useFactory: uninitializeActiveCartMetaReducerFactory,\n        multi: true\n      }]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartPersistenceModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      providers: [{\n        provide: MODULE_INITIALIZER,\n        useFactory: cartStatePersistenceFactory,\n        deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n        multi: true\n      }, {\n        provide: META_REDUCERS,\n        useFactory: uninitializeActiveCartMetaReducerFactory,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartValidationAdapter {}\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartValidationConnector {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n  validate(cartId, userId) {\n    return this.adapter.validate(cartId, userId);\n  }\n  static {\n    this.ɵfac = function CartValidationConnector_Factory(t) {\n      return new (t || CartValidationConnector)(i0.ɵɵinject(CartValidationAdapter));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartValidationConnector,\n      factory: CartValidationConnector.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartValidationConnector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: CartValidationAdapter\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Registers events for the active cart\n */\nclass CartEventBuilder {\n  constructor(actionsSubject, event, activeCartService, stateEventService) {\n    this.actionsSubject = actionsSubject;\n    this.event = event;\n    this.activeCartService = activeCartService;\n    this.stateEventService = stateEventService;\n    this.register();\n  }\n  /**\n   * Registers events for the active cart\n   */\n  register() {\n    this.registerCreateCart();\n    this.registerAddEntry();\n    this.registerRemoveEntry();\n    this.registerUpdateEntry();\n    this.registerDeleteCart();\n    this.registerAddCartVoucher();\n    this.registerRemoveCartVoucher();\n    this.registerMergeCartSuccess();\n  }\n  /**\n   * Register events for adding entry to the active cart\n   */\n  registerAddEntry() {\n    this.registerMapped({\n      action: CART_ADD_ENTRY,\n      event: CartAddEntryEvent\n    });\n    this.registerMapped({\n      action: CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent\n    });\n    this.registerMapped({\n      action: CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent\n    });\n  }\n  registerRemoveEntry() {\n    this.registerMapped({\n      action: CART_REMOVE_ENTRY_SUCCESS,\n      event: CartRemoveEntrySuccessEvent\n    });\n    this.registerMapped({\n      action: CART_REMOVE_ENTRY_FAIL,\n      event: CartRemoveEntryFailEvent\n    });\n  }\n  registerUpdateEntry() {\n    this.registerMapped({\n      action: CART_UPDATE_ENTRY_SUCCESS,\n      event: CartUpdateEntrySuccessEvent\n    });\n    this.registerMapped({\n      action: CART_UPDATE_ENTRY_FAIL,\n      event: CartUpdateEntryFailEvent\n    });\n  }\n  registerMergeCartSuccess() {\n    this.registerMapped({\n      action: MERGE_CART_SUCCESS,\n      event: MergeCartSuccessEvent\n    });\n  }\n  registerCreateCart() {\n    this.stateEventService.register({\n      action: CREATE_CART,\n      event: CreateCartEvent\n    });\n    this.stateEventService.register({\n      action: CREATE_CART_SUCCESS,\n      event: CreateCartSuccessEvent\n    });\n    this.stateEventService.register({\n      action: CREATE_CART_FAIL,\n      event: CreateCartFailEvent\n    });\n  }\n  /**\n   * Registers delete cart events\n   */\n  registerDeleteCart() {\n    this.stateEventService.register({\n      action: DELETE_CART,\n      event: DeleteCartEvent,\n      factory: action => createFrom(DeleteCartEvent, {\n        ...action.payload,\n        cartCode: action.payload.cartId\n      })\n    });\n    this.stateEventService.register({\n      action: DELETE_CART_SUCCESS,\n      event: DeleteCartSuccessEvent,\n      factory: action => createFrom(DeleteCartSuccessEvent, {\n        ...action.payload,\n        cartCode: action.payload.cartId\n      })\n    });\n    this.stateEventService.register({\n      action: DELETE_CART_FAIL,\n      event: DeleteCartFailEvent,\n      factory: action => createFrom(DeleteCartFailEvent, {\n        ...action.payload,\n        cartCode: action.payload.cartId\n      })\n    });\n  }\n  registerAddCartVoucher() {\n    this.stateEventService.register({\n      action: CART_ADD_VOUCHER,\n      event: AddCartVoucherEvent\n    });\n    this.stateEventService.register({\n      action: CART_ADD_VOUCHER_SUCCESS,\n      event: AddCartVoucherSuccessEvent\n    });\n    this.stateEventService.register({\n      action: CART_ADD_VOUCHER_FAIL,\n      event: AddCartVoucherFailEvent\n    });\n  }\n  registerRemoveCartVoucher() {\n    this.stateEventService.register({\n      action: CART_REMOVE_VOUCHER,\n      event: RemoveCartVoucherEvent\n    });\n    this.stateEventService.register({\n      action: CART_REMOVE_VOUCHER_SUCCESS,\n      event: RemoveCartVoucherSuccessEvent\n    });\n    this.stateEventService.register({\n      action: CART_REMOVE_VOUCHER_FAIL,\n      event: RemoveCartVoucherFailEvent\n    });\n  }\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  registerMapped(mapping) {\n    const eventStream$ = this.getAction(mapping.action).pipe(switchMap(action => {\n      // SwitchMap was used instead of withLatestFrom, because we only want to subscribe to cart stream when action is dispatched.\n      // Using withLatestFrom would trigger subscription to cart observables on event subscription and that causes side effects,\n      // such as loading cart when we don't yet need it.\n      return of(action).pipe(withLatestFrom(this.activeCartService.getActive(), this.activeCartService.getActiveCartId()));\n    }), filter(([action, _activeCart, activeCartId]) => action.payload['cartId'] === activeCartId), map(([action, activeCart]) => createFrom(mapping.event, {\n      ...action.payload,\n      cartCode: activeCart.code,\n      entry: action.payload.entry ? action.payload.entry : activeCart.entries?.[Number(action.payload.entryNumber)]\n    })));\n    return this.event.register(mapping.event, eventStream$);\n  }\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  getAction(actionType) {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n  static {\n    this.ɵfac = function CartEventBuilder_Factory(t) {\n      return new (t || CartEventBuilder)(i0.ɵɵinject(i1$1.ActionsSubject), i0.ɵɵinject(i2.EventService), i0.ɵɵinject(i1$2.ActiveCartFacade), i0.ɵɵinject(i2.StateEventService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartEventBuilder,\n      factory: CartEventBuilder.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartEventBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1$1.ActionsSubject\n  }, {\n    type: i2.EventService\n  }, {\n    type: i1$2.ActiveCartFacade\n  }, {\n    type: i2.StateEventService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartEventModule {\n  constructor(_CartEventBuilder) {\n    // Intentional empty constructor\n  }\n  static {\n    this.ɵfac = function CartEventModule_Factory(t) {\n      return new (t || CartEventModule)(i0.ɵɵinject(CartEventBuilder));\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CartEventModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartEventModule, [{\n    type: NgModule,\n    args: [{}]\n  }], () => [{\n    type: CartEventBuilder\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartPageEventBuilder {\n  constructor(eventService) {\n    this.eventService = eventService;\n    this.register();\n  }\n  register() {\n    this.eventService.register(CartPageEvent, this.buildCartPageEvent());\n  }\n  buildCartPageEvent() {\n    return this.eventService.get(NavigationEvent).pipe(filter(navigationEvent => navigationEvent.semanticRoute === 'cart'), map(navigationEvent => createFrom(CartPageEvent, {\n      navigation: navigationEvent\n    })));\n  }\n  static {\n    this.ɵfac = function CartPageEventBuilder_Factory(t) {\n      return new (t || CartPageEventBuilder)(i0.ɵɵinject(i2.EventService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartPageEventBuilder,\n      factory: CartPageEventBuilder.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartPageEventBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i2.EventService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartPageEventModule {\n  constructor(_cartPageEventBuilder) {\n    // Intentional empty constructor\n  }\n  static {\n    this.ɵfac = function CartPageEventModule_Factory(t) {\n      return new (t || CartPageEventModule)(i0.ɵɵinject(CartPageEventBuilder));\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CartPageEventModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartPageEventModule, [{\n    type: NgModule,\n    args: [{}]\n  }], () => [{\n    type: CartPageEventBuilder\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ActiveCartService {\n  constructor(multiCartFacade, userIdService, winRef) {\n    this.multiCartFacade = multiCartFacade;\n    this.userIdService = userIdService;\n    this.winRef = winRef;\n    this.subscription = new Subscription();\n    // This stream is used for referencing carts in API calls.\n    this.activeCartId$ = this.userIdService.getUserId().pipe(\n    // We want to wait the initialization of cartId until the userId is initialized\n    // We have take(1) to not trigger this stream, when userId changes.\n    take(1), switchMap(() => this.multiCartFacade.getCartIdByType(CartType.ACTIVE)),\n    // We also wait until we initialize cart from localStorage\n    filter(cartId => cartId !== undefined),\n    // fallback to current when we don't have particular cart id\n    map(cartId => cartId === '' ? OCC_CART_ID_CURRENT : cartId));\n    // Stream with active cart entity\n    this.cartEntity$ = this.activeCartId$.pipe(switchMap(cartId => this.multiCartFacade.getCartEntity(cartId)));\n    // Flag to prevent cart loading when logged in with code flow\n    // Instead of loading cart will run loadOrMerge method\n    this.shouldLoadCartOnCodeFlow = true;\n    // When the function `requireLoadedCart` is first called, the init cart loading for login user may not be done\n    this.checkInitLoad = undefined;\n    this.initActiveCart();\n    this.detectUserChange();\n  }\n  initActiveCart() {\n    // Stream for getting the cart value\n    const cartValue$ = this.cartEntity$.pipe(map(cartEntity => {\n      return {\n        cart: cartEntity.value,\n        isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n        loaded: Boolean((cartEntity.error || cartEntity.success) && !cartEntity.loading)\n      };\n    }),\n    // we want to emit empty carts even if those are not stable\n    // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n    // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n    filter(({\n      isStable,\n      cart\n    }) => isStable || isEmpty(cart)));\n    // Responsible for loading cart when it does not exist (eg. app initialization when we have only cartId)\n    const loading = cartValue$.pipe(withLatestFrom(this.activeCartId$, this.userIdService.getUserId()), tap(([{\n      cart,\n      loaded,\n      isStable\n    }, cartId, userId]) => {\n      if (isStable && isEmpty(cart) && !loaded && !isTempCartId(cartId) && this.shouldLoadCartOnCodeFlow) {\n        this.load(cartId, userId);\n      }\n    }));\n    this.activeCart$ = using(() => loading.subscribe(), () => cartValue$).pipe(\n    // Normalization for empty cart value returned as empty object.\n    map(({\n      cart\n    }) => cart ? cart : {}), distinctUntilChanged(), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n  detectUserChange() {\n    // Any changes of userId is interesting for us, because we have to merge/load/switch cart in those cases.\n    this.subscription.add(this.userIdService.getUserId().pipe(\n    // We never trigger cart merge/load on app initialization here and that's why we wait with pairwise for a change of userId.\n    pairwise(),\n    // We need cartId once we have the previous and current userId. We don't want to subscribe to cartId stream before.\n    withLatestFrom(this.activeCartId$)).subscribe(([[previousUserId, userId], cartId]) => {\n      // Only change of user and not logout (current userId !== anonymous) should trigger loading mechanism\n      if (isJustLoggedIn(userId, previousUserId)) {\n        this.loadOrMerge(cartId, userId, previousUserId);\n      }\n    }));\n    // Detect user logged in with code flow.\n    if (this.isLoggedInWithCodeFlow()) {\n      // Prevent loading cart while merging.\n      this.shouldLoadCartOnCodeFlow = false;\n      this.subscription.add(this.userIdService.getUserId().pipe(withLatestFrom(this.activeCartId$)).subscribe(([userId, cartId]) => {\n        this.loadOrMerge(cartId, userId, OCC_USER_ID_ANONYMOUS);\n        this.winRef?.localStorage?.removeItem(OAUTH_REDIRECT_FLOW_KEY);\n      }));\n    }\n  }\n  /**\n   * Returns active cart\n   */\n  getActive() {\n    return this.activeCart$;\n  }\n  /**\n   * Waits for the cart to be stable before returning the active cart.\n   */\n  takeActive() {\n    return this.isStable().pipe(filter(isStable => isStable), switchMap(() => this.getActive()), filter(cart => !!cart), take(1));\n  }\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId() {\n    return this.activeCart$.pipe(withLatestFrom(this.userIdService.getUserId()), map(([cart, userId]) => getCartIdByUserId(cart, userId)), distinctUntilChanged());\n  }\n  /**\n   * Waits for the cart to be stable before returning the active cart's ID.\n   */\n  takeActiveCartId() {\n    return this.isStable().pipe(filter(isStable => isStable), switchMap(() => this.getActiveCartId()), filter(cartId => !!cartId), take(1));\n  }\n  /**\n   * Returns cart entries\n   */\n  getEntries() {\n    return this.activeCartId$.pipe(switchMap(cartId => this.multiCartFacade.getEntries(cartId)), distinctUntilChanged());\n  }\n  /**\n   * Returns last cart entry for provided product code.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param productCode\n   */\n  getLastEntry(productCode) {\n    return this.activeCartId$.pipe(switchMap(cartId => this.multiCartFacade.getLastEntry(cartId, productCode)), distinctUntilChanged());\n  }\n  /**\n   * Returns cart loading state\n   */\n  getLoading() {\n    return this.cartEntity$.pipe(map(cartEntity => Boolean(cartEntity.loading)), distinctUntilChanged());\n  }\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable() {\n    return this.activeCartId$.pipe(switchMap(cartId => this.multiCartFacade.isStable(cartId)));\n  }\n  /**\n   * Loads cart in every case except anonymous user and current cart combination\n   */\n  load(cartId, userId) {\n    if (!(userId === OCC_USER_ID_ANONYMOUS && cartId === OCC_CART_ID_CURRENT)) {\n      this.multiCartFacade.loadCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true\n        }\n      });\n    }\n  }\n  /**\n   * Loads cart upon login, whenever there's an existing cart, merge it into the current user cart\n   * cartId will be defined (not '', null, undefined)\n   */\n  loadOrMerge(cartId, userId, previousUserId) {\n    if (cartId === OCC_CART_ID_CURRENT ||\n    // It covers the case when you are logged in and then asm user login, you don't want to merge, but only load emulated user cart\n    // Similarly when you are logged in as asm user and you logout and want to resume previous user session\n    previousUserId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartFacade.loadCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true\n        }\n      });\n    } else if (Boolean(getLastValueSync(this.isGuestCart()))) {\n      this.guestCartMerge(cartId);\n    } else {\n      // We have particular cart locally, but we logged in, so we need to combine this with current cart or make it ours.\n      this.multiCartFacade.mergeToCurrentCart({\n        userId,\n        cartId,\n        extraData: {\n          active: true\n        }\n      });\n    }\n  }\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  guestCartMerge(cartId) {\n    this.getEntries().pipe(take(1)).subscribe(entries => {\n      this.multiCartFacade.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n      this.addEntriesGuestMerge(entries);\n    });\n  }\n  /**\n   * Adds entries from guest cart to user cart\n   */\n  addEntriesGuestMerge(cartEntries) {\n    const entriesToAdd = cartEntries.map(entry => ({\n      productCode: entry.product?.code ?? '',\n      quantity: entry.quantity ?? 0\n    }));\n    this.requireLoadedCart(true).pipe(withLatestFrom(this.userIdService.getUserId())).subscribe(([cart, userId]) => {\n      this.multiCartFacade.addEntries(userId, getCartIdByUserId(cart, userId), entriesToAdd);\n    });\n  }\n  isCartCreating(cartState, cartId) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return isTempCartId(cartId) && (cartState.loading || cartState.success || cartState.error);\n  }\n  /**\n   * Check if user is just logged in with code flow\n   */\n  isLoggedInWithCodeFlow() {\n    return !!this.winRef?.localStorage?.getItem(OAUTH_REDIRECT_FLOW_KEY);\n  }\n  requireLoadedCart(forGuestMerge = false) {\n    this.checkInitLoad = this.checkInitLoad === undefined;\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    const cartSelector$ = (forGuestMerge ? this.cartEntity$.pipe(filter(() => !Boolean(getLastValueSync(this.isGuestCart())))) : this.cartEntity$).pipe(filter(cartState => !cartState.loading || !!this.checkInitLoad));\n    return this.activeCartId$.pipe(\n    // Avoid load/create call when there are new cart creating at the moment\n    withLatestFrom(cartSelector$), filter(([cartId, cartState]) => !this.isCartCreating(cartState, cartId)), map(([, cartState]) => cartState), take(1)).pipe(withLatestFrom(this.userIdService.getUserId()), tap(([cartState, userId]) => {\n      // Try to load the cart, because it might have been created on another device between our login and add entry call\n      if (isEmpty(cartState.value) && userId !== OCC_USER_ID_ANONYMOUS && !cartState.loading) {\n        this.load(OCC_CART_ID_CURRENT, userId);\n      }\n      this.checkInitLoad = false;\n    }), switchMap(() => cartSelector$),\n    // create cart can happen to anonymous user if it is empty or to any other user if it is loaded and empty\n    withLatestFrom(this.userIdService.getUserId()), filter(([cartState, userId]) => Boolean(userId === OCC_USER_ID_ANONYMOUS || cartState.success || cartState.error)), take(1)).pipe(tap(([cartState, userId]) => {\n      if (isEmpty(cartState.value)) {\n        this.multiCartFacade.createCart({\n          userId,\n          extraData: {\n            active: true\n          }\n        });\n      }\n    }), switchMap(() => cartSelector$), filter(cartState => Boolean(cartState.success || cartState.error)),\n    // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n    withLatestFrom(this.activeCartId$), filter(([cartState, cartId]) => !this.isCartCreating(cartState, cartId)), map(([cartState]) => cartState.value), filter(cart => !isEmpty(cart)), take(1));\n  }\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   * @param pickupStore\n   */\n  addEntry(productCode, quantity, pickupStore) {\n    this.requireLoadedCart().pipe(withLatestFrom(this.userIdService.getUserId())).subscribe(([cart, userId]) => {\n      this.multiCartFacade.addEntry(userId, getCartIdByUserId(cart, userId), productCode, quantity, pickupStore);\n    });\n  }\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry) {\n    this.activeCartId$.pipe(withLatestFrom(this.userIdService.getUserId()), take(1)).subscribe(([cartId, userId]) => {\n      this.multiCartFacade.removeEntry(userId, cartId, entry.entryNumber);\n    });\n  }\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   * @param pickupStore\n   * @param pickupToDelivery\n   */\n  updateEntry(entryNumber, quantity, pickupStore, pickupToDelivery = false) {\n    this.activeCartId$.pipe(withLatestFrom(this.userIdService.getUserId()), take(1)).subscribe(([cartId, userId]) => {\n      this.multiCartFacade.updateEntry(userId, cartId, entryNumber, quantity, pickupStore, pickupToDelivery);\n    });\n  }\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode) {\n    return this.activeCartId$.pipe(switchMap(cartId => this.multiCartFacade.getEntry(cartId, productCode)), distinctUntilChanged());\n  }\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email) {\n    this.activeCartId$.pipe(withLatestFrom(this.userIdService.getUserId()), take(1)).subscribe(([cartId, userId]) => {\n      this.multiCartFacade.assignEmail(cartId, userId, email);\n    });\n  }\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser() {\n    return this.activeCart$.pipe(map(cart => cart.user));\n  }\n  // TODO: Make cart required param in 4.0\n  /**\n   * Returns observable of true for guest cart\n   */\n  isGuestCart(cart) {\n    return cart ? of(this.isCartUserGuest(cart)) : this.activeCart$.pipe(map(activeCart => this.isCartUserGuest(activeCart)), distinctUntilChanged());\n  }\n  isCartUserGuest(cart) {\n    const cartUser = cart.user;\n    return Boolean(cartUser && (cartUser.name === OCC_USER_ID_GUEST || isEmail(cartUser.uid?.split('|').slice(1).join('|'))));\n  }\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries) {\n    const entriesToAdd = cartEntries.map(entry => ({\n      productCode: entry.product?.code ?? '',\n      quantity: entry.quantity ?? 0\n    }));\n    this.requireLoadedCart().pipe(withLatestFrom(this.userIdService.getUserId())).subscribe(([cart, userId]) => {\n      if (cart) {\n        this.multiCartFacade.addEntries(userId, getCartIdByUserId(cart, userId), entriesToAdd);\n      }\n    });\n  }\n  /**\n   * Reloads active cart\n   */\n  reloadActiveCart() {\n    combineLatest([this.getActiveCartId(), this.userIdService.takeUserId()]).pipe(take(1), map(([cartId, userId]) => {\n      this.multiCartFacade.loadCart({\n        cartId,\n        userId,\n        extraData: {\n          active: true\n        }\n      });\n    })).subscribe();\n  }\n  hasPickupItems() {\n    return this.getActive().pipe(map(cart => cart.pickupItemsQuantity ? cart.pickupItemsQuantity > 0 : false));\n  }\n  hasDeliveryItems() {\n    return this.getActive().pipe(map(cart => cart.deliveryItemsQuantity ? cart.deliveryItemsQuantity > 0 : false));\n  }\n  getPickupEntries() {\n    return this.getEntries().pipe(map(entries => entries.filter(entry => entry.deliveryPointOfService !== undefined)));\n  }\n  getDeliveryEntries() {\n    return this.getEntries().pipe(map(entries => entries.filter(entry => entry.deliveryPointOfService === undefined)));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  static {\n    this.ɵfac = function ActiveCartService_Factory(t) {\n      return new (t || ActiveCartService)(i0.ɵɵinject(i1$2.MultiCartFacade), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.WindowRef));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ActiveCartService,\n      factory: ActiveCartService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ActiveCartService, [{\n    type: Injectable\n  }], () => [{\n    type: i1$2.MultiCartFacade\n  }, {\n    type: i2.UserIdService\n  }, {\n    type: i2.WindowRef\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartValidationStateService {\n  constructor(routingService) {\n    this.routingService = routingService;\n    this.NAVIGATION_SKIPS = 2;\n    this.navigationIdCount = 0;\n    this.subscription = new Subscription();\n    this.cartValidationResult$ = new ReplaySubject(1);\n    this.checkForValidationResultClear$ = this.routingService.getRouterState().pipe(withLatestFrom(this.cartValidationResult$), tap(([routerState, cartModifications]) => {\n      if (this.navigationIdCount + this.NAVIGATION_SKIPS <= routerState.navigationId && cartModifications.length) {\n        this.cartValidationResult$.next([]);\n        this.navigationIdCount = routerState.navigationId;\n      }\n    }));\n    this.setInitialState();\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  setInitialState() {\n    this.setNavigationIdStep();\n    this.subscription.add(this.checkForValidationResultClear$.subscribe());\n  }\n  updateValidationResultAndRoutingId(cartModification) {\n    this.cartValidationResult$.next(cartModification);\n    this.setNavigationIdStep();\n  }\n  setNavigationIdStep() {\n    this.routingService.getRouterState().pipe(take(1)).subscribe(routerState => this.navigationIdCount = routerState.navigationId);\n  }\n  static {\n    this.ɵfac = function CartValidationStateService_Factory(t) {\n      return new (t || CartValidationStateService)(i0.ɵɵinject(i2.RoutingService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartValidationStateService,\n      factory: CartValidationStateService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartValidationStateService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i2.RoutingService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartValidationService {\n  constructor(cartValidationConnector, command, userIdService, activeCartFacade, cartValidationStateService) {\n    this.cartValidationConnector = cartValidationConnector;\n    this.command = command;\n    this.userIdService = userIdService;\n    this.activeCartFacade = activeCartFacade;\n    this.cartValidationStateService = cartValidationStateService;\n    this.validateCartCommand = this.command.create(() => combineLatest([this.activeCartFacade.getActiveCartId(), this.userIdService.takeUserId(), this.activeCartFacade.isStable()]).pipe(filter(([_, __, loaded]) => loaded), take(1), switchMap(([cartId, userId]) => this.cartValidationConnector.validate(cartId, userId))), {\n      strategy: CommandStrategy.CancelPrevious\n    });\n  }\n  /**\n   * Validates cart and returns cart modification list.\n   */\n  validateCart() {\n    return this.validateCartCommand.execute();\n  }\n  /**\n   * Returns cart modification results\n   */\n  getValidationResults() {\n    return this.cartValidationStateService.cartValidationResult$;\n  }\n  static {\n    this.ɵfac = function CartValidationService_Factory(t) {\n      return new (t || CartValidationService)(i0.ɵɵinject(CartValidationConnector), i0.ɵɵinject(i2.CommandService), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i1$2.ActiveCartFacade), i0.ɵɵinject(CartValidationStateService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartValidationService,\n      factory: CartValidationService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartValidationService, [{\n    type: Injectable\n  }], () => [{\n    type: CartValidationConnector\n  }, {\n    type: i2.CommandService\n  }, {\n    type: i2.UserIdService\n  }, {\n    type: i1$2.ActiveCartFacade\n  }, {\n    type: CartValidationStateService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartVoucherService {\n  constructor(store, activeCartFacade, userIdService) {\n    this.store = store;\n    this.activeCartFacade = activeCartFacade;\n    this.userIdService = userIdService;\n  }\n  addVoucher(voucherId, cartId) {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) => this.store.dispatch(new CartAddVoucher({\n      userId: occUserId,\n      cartId: cartIdentifier,\n      voucherId: voucherId\n    })));\n  }\n  removeVoucher(voucherId, cartId) {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) => this.store.dispatch(new CartRemoveVoucher({\n      userId: occUserId,\n      cartId: cartIdentifier,\n      voucherId: voucherId\n    })));\n  }\n  /**\n   * Get add voucher process error flag\n   */\n  getAddVoucherResultError() {\n    return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID)));\n  }\n  /**\n   * Get add voucher process success flag\n   */\n  getAddVoucherResultSuccess() {\n    return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID)));\n  }\n  /**\n   * Get add voucher process loading flag\n   */\n  getAddVoucherResultLoading() {\n    return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID)));\n  }\n  /**\n   * Reset add voucher process\n   */\n  resetAddVoucherProcessingState() {\n    this.store.dispatch(new CartResetAddVoucher());\n  }\n  combineUserAndCartId(cartId) {\n    if (cartId) {\n      return this.userIdService.getUserId().pipe(take(1), map(userId => [userId, cartId]));\n    } else {\n      return combineLatest([this.userIdService.getUserId(), this.activeCartFacade.getActiveCartId()]).pipe(take(1));\n    }\n  }\n  static {\n    this.ɵfac = function CartVoucherService_Factory(t) {\n      return new (t || CartVoucherService)(i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i1$2.ActiveCartFacade), i0.ɵɵinject(i2.UserIdService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartVoucherService,\n      factory: CartVoucherService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartVoucherService, [{\n    type: Injectable\n  }], () => [{\n    type: i1$1.Store\n  }, {\n    type: i1$2.ActiveCartFacade\n  }, {\n    type: i2.UserIdService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass MultiCartService {\n  constructor(store, userIdService) {\n    this.store = store;\n    this.userIdService = userIdService;\n  }\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId) {\n    return this.store.pipe(select(getCartSelectorFactory(cartId)));\n  }\n  /**\n   * Returns a list of carts from store as an observable\n   *\n   */\n  getCarts() {\n    return this.store.pipe(select(getCartsSelectorFactory));\n  }\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId) {\n    return this.store.pipe(select(getCartEntitySelectorFactory(cartId)));\n  }\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId) {\n    return this.store.pipe(select(getCartIsStableSelectorFactory(cartId)),\n    // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n    // This flickering should only be avoided when switching from false to true\n    // Start of loading should be showed instantly (no debounce)\n    // Extra actions are only dispatched after some loading\n    debounce(isStable => isStable ? timer(0) : of(undefined)), distinctUntilChanged());\n  }\n  /**\n   * Simple random temp cart id generator\n   */\n  generateTempCartId() {\n    const pseudoUuid = Math.random().toString(36).substring(2, 11);\n    return `temp-${pseudoUuid}`;\n  }\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData\n  }) {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(new CreateCart({\n      extraData,\n      userId,\n      oldCartId,\n      toMergeCartGuid,\n      tempCartId\n    }));\n    return this.getCartIdByType(extraData?.active ? CartType.ACTIVE : CartType.NEW_CREATED).pipe(switchMap(cartId => this.getCart(cartId)), filter(isNotUndefined));\n  }\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(new MergeCart({\n      userId,\n      cartId,\n      extraData,\n      tempCartId\n    }));\n  }\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData\n  }) {\n    this.store.dispatch(new LoadCart({\n      userId,\n      cartId,\n      extraData\n    }));\n  }\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId) {\n    return this.store.pipe(select(getCartEntriesSelectorFactory(cartId)));\n  }\n  /**\n   * Get last entry for specific product code from cart.\n   * Needed to cover processes where multiple entries can share the same product code\n   * (e.g. promotions or configurable products)\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getLastEntry(cartId, productCode) {\n    return this.store.pipe(select(getCartEntriesSelectorFactory(cartId)), map(entries => {\n      const filteredEntries = entries.filter(entry => entry.product?.code === productCode);\n      return filteredEntries ? filteredEntries[filteredEntries.length - 1] : undefined;\n    }));\n  }\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   * @param pickupStore\n   */\n  addEntry(userId, cartId, productCode, quantity, pickupStore) {\n    this.store.dispatch(new CartAddEntry({\n      userId,\n      cartId,\n      productCode,\n      quantity,\n      pickupStore\n    }));\n  }\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(userId, cartId, products) {\n    products.forEach(product => {\n      this.store.dispatch(new CartAddEntry({\n        userId,\n        cartId,\n        productCode: product.productCode,\n        quantity: product.quantity\n      }));\n    });\n  }\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId, cartId, entryNumber) {\n    this.store.dispatch(new CartRemoveEntry({\n      userId,\n      cartId,\n      entryNumber: `${entryNumber}`\n    }));\n  }\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   * @param pickupStore\n   * @param pickupToDelivery\n   */\n  updateEntry(userId, cartId, entryNumber, quantity, pickupStore, pickupToDelivery = false) {\n    if (quantity !== undefined && quantity <= 0) {\n      this.removeEntry(userId, cartId, entryNumber);\n    } else {\n      this.store.dispatch(new CartUpdateEntry({\n        userId,\n        cartId,\n        pickupStore,\n        pickupToDelivery,\n        entryNumber: `${entryNumber}`,\n        quantity: quantity\n      }));\n    }\n  }\n  /**\n   * Get first entry from cart matching the specified product code\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId, productCode) {\n    return this.store.pipe(select(getCartEntrySelectorFactory(cartId, productCode)));\n  }\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId, userId, email) {\n    this.store.dispatch(new AddEmailToCart({\n      userId,\n      cartId,\n      email\n    }));\n  }\n  removeCart(cartId) {\n    this.store.dispatch(new RemoveCart({\n      cartId\n    }));\n  }\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId, userId) {\n    this.store.dispatch(new DeleteCart({\n      userId,\n      cartId\n    }));\n  }\n  /**\n   * Reloads the cart with specified id.\n   *\n   * @param cartId\n   * @param extraData\n   */\n  reloadCart(cartId, extraData) {\n    this.userIdService.takeUserId().subscribe(userId => this.store.dispatch(new LoadCart({\n      userId,\n      cartId,\n      extraData\n    })));\n  }\n  /**\n   * Get the cart id based on cart type\n   *\n   * @param cartType\n   */\n  getCartIdByType(cartType) {\n    return this.store.pipe(select(getCartIdByTypeFactory(cartType)), distinctUntilChanged());\n  }\n  static {\n    this.ɵfac = function MultiCartService_Factory(t) {\n      return new (t || MultiCartService)(i0.ɵɵinject(i1$1.Store), i0.ɵɵinject(i2.UserIdService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MultiCartService,\n      factory: MultiCartService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MultiCartService, [{\n    type: Injectable\n  }], () => [{\n    type: i1$1.Store\n  }, {\n    type: i2.UserIdService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass SelectiveCartService {\n  constructor(userProfileFacade, multiCartFacade, baseSiteService, userIdService) {\n    this.userProfileFacade = userProfileFacade;\n    this.multiCartFacade = multiCartFacade;\n    this.baseSiteService = baseSiteService;\n    this.userIdService = userIdService;\n  }\n  /**\n   * Initialize the stream when first call this function\n   */\n  getCart() {\n    if (!this.selectiveCart$) {\n      this.selectiveCart$ = combineLatest([this.getSelectiveCartId(), this.userProfileFacade.get(), this.userIdService.getUserId(), this.baseSiteService.getActive()]).pipe(distinctUntilChanged(), tap(([selectiveId, user, userId, activeBaseSite]) => {\n        if (!Boolean(selectiveId) && userId !== OCC_USER_ID_ANONYMOUS && user?.customerId) {\n          this.multiCartFacade.loadCart({\n            userId: userId,\n            cartId: `selectivecart${activeBaseSite}${user.customerId}`\n          });\n        }\n      }), filter(([selectiveId]) => Boolean(selectiveId)), switchMap(([selectiveId]) => this.multiCartFacade.getCart(selectiveId)), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n    return this.selectiveCart$;\n  }\n  getEntries() {\n    return this.getSelectiveCartId().pipe(switchMap(selectiveId => this.multiCartFacade.getEntries(selectiveId)));\n  }\n  isStable() {\n    return this.getSelectiveCartId().pipe(switchMap(selectiveId => this.multiCartFacade.isStable(selectiveId)));\n  }\n  addEntry(productCode, quantity) {\n    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {\n      this.multiCartFacade.addEntry(userId, selectiveId, productCode, quantity);\n    });\n  }\n  removeEntry(entry) {\n    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {\n      this.multiCartFacade.removeEntry(userId, selectiveId, entry.entryNumber);\n    });\n  }\n  updateEntry(entryNumber, quantity) {\n    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {\n      this.multiCartFacade.updateEntry(userId, selectiveId, entryNumber, quantity);\n    });\n  }\n  getEntry(productCode) {\n    return this.getSelectiveCartId().pipe(switchMap(selectiveId => this.multiCartFacade.getEntry(selectiveId, productCode)));\n  }\n  getSelectiveCartId() {\n    return this.multiCartFacade.getCartIdByType(CartType.SELECTIVE);\n  }\n  getSelectiveIdWithUserId() {\n    return this.getSelectiveCartId().pipe(distinctUntilChanged(), withLatestFrom(this.userIdService.getUserId()), take(1));\n  }\n  static {\n    this.ɵfac = function SelectiveCartService_Factory(t) {\n      return new (t || SelectiveCartService)(i0.ɵɵinject(i1$3.UserProfileFacade), i0.ɵɵinject(i1$2.MultiCartFacade), i0.ɵɵinject(i2.BaseSiteService), i0.ɵɵinject(i2.UserIdService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SelectiveCartService,\n      factory: SelectiveCartService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectiveCartService, [{\n    type: Injectable\n  }], () => [{\n    type: i1$3.UserProfileFacade\n  }, {\n    type: i1$2.MultiCartFacade\n  }, {\n    type: i2.BaseSiteService\n  }, {\n    type: i2.UserIdService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst facadeProviders = [ActiveCartService, {\n  provide: ActiveCartFacade,\n  useExisting: ActiveCartService\n}, CartVoucherService, {\n  provide: CartVoucherFacade,\n  useExisting: CartVoucherService\n}, MultiCartService, {\n  provide: MultiCartFacade,\n  useExisting: MultiCartService\n}, SelectiveCartService, {\n  provide: SelectiveCartFacade,\n  useExisting: SelectiveCartService\n}, CartValidationService, {\n  provide: CartValidationFacade,\n  useExisting: CartValidationService\n}];\nclass BadCartRequestHandler extends HttpErrorHandler {\n  constructor() {\n    super(...arguments);\n    this.responseStatus = HttpResponseStatus.BAD_REQUEST;\n  }\n  getPriority() {\n    return 0 /* Priority.NORMAL */;\n  }\n  hasMatch(errorResponse) {\n    return super.hasMatch(errorResponse) && this.getErrors(errorResponse).some(isCartError);\n  }\n  handleError(request, response) {\n    this.handleCartNotFoundError(request, response);\n    this.handleOtherCartErrors(request, response);\n  }\n  handleCartNotFoundError(_request, response) {\n    this.getErrors(response).filter(e => isCartNotFoundError(e)).forEach(() => {\n      this.globalMessageService.add({\n        key: 'httpHandlers.cartNotFound'\n      }, GlobalMessageType.MSG_TYPE_ERROR);\n    });\n  }\n  handleOtherCartErrors(_request, response) {\n    this.getErrors(response).filter(e => e.reason !== 'notFound' || e.subjectType !== 'cart').forEach(error => {\n      this.globalMessageService.add(error.message ? error.message : {\n        key: 'httpHandlers.otherCartErrors'\n      }, GlobalMessageType.MSG_TYPE_ERROR);\n    });\n  }\n  getErrors(response) {\n    return (response.error?.errors || []).filter(error => error.type !== 'JaloObjectNoLongerValidError');\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵBadCartRequestHandler_BaseFactory;\n      return function BadCartRequestHandler_Factory(t) {\n        return (ɵBadCartRequestHandler_BaseFactory || (ɵBadCartRequestHandler_BaseFactory = i0.ɵɵgetInheritedFactory(BadCartRequestHandler)))(t || BadCartRequestHandler);\n      };\n    })();\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: BadCartRequestHandler,\n      factory: BadCartRequestHandler.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BadCartRequestHandler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass BadVoucherRequestHandler extends HttpErrorHandler {\n  constructor() {\n    super(...arguments);\n    this.responseStatus = HttpResponseStatus.BAD_REQUEST;\n  }\n  getPriority() {\n    return 0 /* Priority.NORMAL */;\n  }\n  hasMatch(errorResponse) {\n    return super.hasMatch(errorResponse) && this.getErrors(errorResponse).some(isVoucherError);\n  }\n  handleError(request, response) {\n    this.handleVoucherExceededError(request, response);\n    this.handleVoucherInvalidError(request, response);\n  }\n  handleVoucherExceededError(_request, response) {\n    this.getErrors(response).filter(e => voucherExceededError(e)).forEach(() => {\n      this.globalMessageService.add({\n        key: 'httpHandlers.voucherExceeded'\n      }, GlobalMessageType.MSG_TYPE_ERROR);\n    });\n  }\n  handleVoucherInvalidError(_request, response) {\n    this.getErrors(response).filter(e => voucherInvalidError(e)).forEach(() => {\n      this.globalMessageService.add({\n        key: 'httpHandlers.invalidCodeProvided'\n      }, GlobalMessageType.MSG_TYPE_ERROR);\n    });\n  }\n  getErrors(response) {\n    return (response.error?.errors || []).filter(error => error.type !== 'JaloObjectNoLongerValidError');\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵBadVoucherRequestHandler_BaseFactory;\n      return function BadVoucherRequestHandler_Factory(t) {\n        return (ɵBadVoucherRequestHandler_BaseFactory || (ɵBadVoucherRequestHandler_BaseFactory = i0.ɵɵgetInheritedFactory(BadVoucherRequestHandler)))(t || BadVoucherRequestHandler);\n      };\n    })();\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: BadVoucherRequestHandler,\n      factory: BadVoucherRequestHandler.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BadVoucherRequestHandler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass MultiCartStoreModule {\n  static {\n    this.ɵfac = function MultiCartStoreModule_Factory(t) {\n      return new (t || MultiCartStoreModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MultiCartStoreModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [multiCartReducerProvider, MultiCartEffectsService],\n      imports: [CommonModule, StateModule, StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n        metaReducers: multiCartMetaReducers\n      }), EffectsModule.forFeature(effects)]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MultiCartStoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, StateModule, StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n        metaReducers: multiCartMetaReducers\n      }), EffectsModule.forFeature(effects)],\n      providers: [multiCartReducerProvider, MultiCartEffectsService]\n    }]\n  }], null, null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartBaseCoreModule {\n  static {\n    this.ɵfac = function CartBaseCoreModule_Factory(t) {\n      return new (t || CartBaseCoreModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CartBaseCoreModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [CartConnector, CartEntryConnector, CartVoucherConnector, CartValidationConnector, ...facadeProviders, {\n        provide: HttpErrorHandler,\n        useExisting: BadCartRequestHandler,\n        multi: true\n      }, {\n        provide: HttpErrorHandler,\n        useExisting: BadVoucherRequestHandler,\n        multi: true\n      }],\n      imports: [CartEventModule, MultiCartStoreModule, CartPersistenceModule, CartPageEventModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartBaseCoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CartEventModule, MultiCartStoreModule, CartPersistenceModule, CartPageEventModule],\n      providers: [CartConnector, CartEntryConnector, CartVoucherConnector, CartValidationConnector, ...facadeProviders, {\n        provide: HttpErrorHandler,\n        useExisting: BadCartRequestHandler,\n        multi: true\n      }, {\n        provide: HttpErrorHandler,\n        useExisting: BadVoucherRequestHandler,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CART_VALIDATION_NORMALIZER = new InjectionToken('CartValidationNormalizer');\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartConfigService {\n  constructor(config) {\n    this.config = config;\n  }\n  isSelectiveCartEnabled() {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n  isCartValidationEnabled() {\n    return Boolean(this.config?.cart?.validation?.enabled);\n  }\n  static {\n    this.ɵfac = function CartConfigService_Factory(t) {\n      return new (t || CartConfigService)(i0.ɵɵinject(i1$2.CartConfig));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartConfigService,\n      factory: CartConfigService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartConfigService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1$2.CartConfig\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CartValidationGuard {\n  constructor(cartValidationService, semanticPathService, router, globalMessageService, activeCartService, cartValidationStateService, cartConfigService) {\n    this.cartValidationService = cartValidationService;\n    this.semanticPathService = semanticPathService;\n    this.router = router;\n    this.globalMessageService = globalMessageService;\n    this.activeCartService = activeCartService;\n    this.cartValidationStateService = cartValidationStateService;\n    this.cartConfigService = cartConfigService;\n    this.GLOBAL_MESSAGE_TIMEOUT = 10000;\n  }\n  canActivate() {\n    return !this.cartConfigService.isCartValidationEnabled() ? of(true) : this.cartValidationService.validateCart().pipe(withLatestFrom(this.activeCartService.getEntries()), map(([cartModificationList, cartEntries]) => {\n      this.cartValidationStateService.updateValidationResultAndRoutingId(cartModificationList.cartModifications ?? []);\n      if (cartModificationList.cartModifications !== undefined && cartModificationList.cartModifications.length !== 0) {\n        let validationResultMessage;\n        const modification = cartModificationList.cartModifications[0];\n        if (cartEntries.length === 1 && cartEntries[0].product?.code === modification.entry?.product?.code && modification.statusCode === CartValidationStatusCode.NO_STOCK) {\n          validationResultMessage = {\n            key: 'validation.cartEntryRemoved',\n            params: {\n              name: modification.entry?.product?.name\n            }\n          };\n        } else {\n          validationResultMessage = {\n            key: 'validation.cartEntriesChangeDuringCheckout'\n          };\n        }\n        this.globalMessageService.add(validationResultMessage, GlobalMessageType.MSG_TYPE_ERROR, this.GLOBAL_MESSAGE_TIMEOUT);\n        this.activeCartService.reloadActiveCart();\n        return this.router.parseUrl(this.semanticPathService.get('cart') ?? '');\n      }\n      return true;\n    }));\n  }\n  static {\n    this.ɵfac = function CartValidationGuard_Factory(t) {\n      return new (t || CartValidationGuard)(i0.ɵɵinject(i1$2.CartValidationFacade), i0.ɵɵinject(i2.SemanticPathService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i2.GlobalMessageService), i0.ɵɵinject(i1$2.ActiveCartFacade), i0.ɵɵinject(CartValidationStateService), i0.ɵɵinject(CartConfigService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: CartValidationGuard,\n      factory: CartValidationGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CartValidationGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1$2.CartValidationFacade\n  }, {\n    type: i2.SemanticPathService\n  }, {\n    type: i3.Router\n  }, {\n    type: i2.GlobalMessageService\n  }, {\n    type: i1$2.ActiveCartFacade\n  }, {\n    type: CartValidationStateService\n  }, {\n    type: CartConfigService\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ProductImportInfoService {\n  constructor(actionsSubject) {\n    this.actionsSubject = actionsSubject;\n    this.logger = inject(LoggerService);\n  }\n  /**\n   * Get emission of add entry results from actions subject\n   *\n   * @param {string} cartId\n   * @returns {Observable<ProductImportInfo>}\n   */\n  getResults(cartId) {\n    return this.actionsSubject.pipe(ofType(CART_ADD_ENTRY_SUCCESS, CART_ADD_ENTRY_FAIL), filter(action => action.payload.cartId === cartId), map(action => this.mapMessages(action)));\n  }\n  /**\n   * Map actions to summary messages\n   *\n   * @param {CartActions.CartAddEntrySuccess | CartActions.CartAddEntryFail} action\n   * @returns ProductImportInfo\n   */\n  mapMessages(action) {\n    const {\n      productCode\n    } = action.payload;\n    if (action instanceof CartAddEntrySuccess) {\n      const {\n        quantity,\n        quantityAdded,\n        entry,\n        statusCode\n      } = action.payload;\n      if (statusCode === ProductImportStatus.LOW_STOCK) {\n        return {\n          productCode,\n          statusCode,\n          productName: entry?.product?.name,\n          quantity,\n          quantityAdded\n        };\n      }\n      if (statusCode === ProductImportStatus.SUCCESS || statusCode === ProductImportStatus.NO_STOCK) {\n        return {\n          productCode,\n          statusCode,\n          productName: entry?.product?.name\n        };\n      }\n    } else if (action instanceof CartAddEntryFail) {\n      const {\n        error\n      } = action.payload;\n      if (error?.details[0]?.type === 'UnknownIdentifierError') {\n        return {\n          productCode,\n          statusCode: ProductImportStatus.UNKNOWN_IDENTIFIER\n        };\n      }\n    }\n    if (isDevMode()) {\n      this.logger.warn('Unrecognized cart add entry action type while mapping messages', action);\n    }\n    return {\n      productCode,\n      statusCode: ProductImportStatus.UNKNOWN_ERROR\n    };\n  }\n  static {\n    this.ɵfac = function ProductImportInfoService_Factory(t) {\n      return new (t || ProductImportInfoService)(i0.ɵɵinject(i1$1.ActionsSubject));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ProductImportInfoService,\n      factory: ProductImportInfoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProductImportInfoService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1$1.ActionsSubject\n  }], null);\n})();\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2024 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ADD_VOUCHER_PROCESS_ID, ActiveCartService, CART_VALIDATION_NORMALIZER, cartGroup_actions as CartActions, CartAdapter, CartBaseCoreModule, CartConfigService, CartConnector, CartEntryAdapter, CartEntryConnector, CartEventBuilder, CartEventModule, CartPageEventBuilder, CartPageEventModule, CartPersistenceModule, CartValidationAdapter, CartValidationConnector, CartValidationGuard, CartValidationService, CartValidationStateService, CartVoucherAdapter, CartVoucherConnector, CartVoucherService, MULTI_CART_DATA, MULTI_CART_FEATURE, MultiCartEffectsService, multiCartGroup_selectors as MultiCartSelectors, MultiCartService, MultiCartStatePersistenceService, ProductImportInfoService, SelectiveCartService, cartStatePersistenceFactory, getCartIdByUserId, isCartError, isCartNotFoundError, isEmail, isEmpty, isJustLoggedIn, isSelectiveCart, isTempCartId, isVoucherError, uninitializeActiveCartMetaReducerFactory, voucherExceededError, voucherInvalidError };\n"],"mappings":"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","names":["_CartEventBuilder"],"x_google_ignoreList":[0]}